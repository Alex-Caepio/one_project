pipeline{
    environment{
        projectName = "oneness-dev-back"
        workingEnv = "dev"
        registryName = "262543608829.dkr.ecr.eu-west-1.amazonaws.com"
        registryURL = "https://262543608829.dkr.ecr.eu-west-1.amazonaws.com"
        AWSregion = "eu-west-1"
        registryCredentials = "oneness_dev_partner"
        jenkins_envfile = "oneness_envconfig_dev_aws"
    }

    agent{
        label "master"
    }

    stages{

        stage("Build docker image"){
            steps{
                configFileProvider([configFile(fileId: "$jenkins_envfile", targetLocation: '.env')]){
                    script{
                        dockerImage = docker.build('$projectName:$workingEnv', "-f ./Dockerfile.aws ./")
                    }
                }
            }
        }

        stage("Deploy docker image to AWS ECR"){
            steps{
                script{
                    docker.withRegistry("$registryURL","ecr:$AWSregion:$registryCredentials"){
                        dockerImage.push()
                    }
                }
            }
        }

        stage("Clean from docker images"){
            steps{
                sh '''docker rmi -f $(docker images --filter=reference=${projectName} -q) >/dev/null 2>&1'''
            }
        }

        stage('ECS Service update') {
            steps {
                withAWS(credentials: "$registryCredentials", region: "$AWSregion") {
//                    sh '''aws ecs update-service --cluster tom-app-dev --service back --task-definition tom-backend --force-new-deployment
                     sh '''aws ecs update-service --cluster fargate-test --service back --task-definition fargate-back --force-new-deployment
//                    aws ecs update-service --cluster tom-app-dev --service back-cron --task-definition back-artisan:3 --force-new-deployment
                     aws ecs update-service --cluster fargate-test --service back-cron --task-definition fargate-back-artisan:1 --force-new-deployment
//                    aws ecs run-task --cluster tom-app-dev --count 1 --launch-type EC2 --task-definition back-artisan'''
                     aws ecs run-task --cluster fargate-test --count 1 --launch-type FARGATE --task-definition fargate-back-artisan --network-configuration "awsvpcConfiguration={subnets=[subnet-05c45b7a5c26118c5,subnet-0c8925d4d4c95bfb9],securityGroups=[sg-0df3e2cc47174798d],assignPublicIp=DISABLED}" '''
                }
            }
        }

    }
    post{
        success{
            cleanWs()
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}
